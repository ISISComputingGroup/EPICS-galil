# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_motor_withwrappers.template $
# $Revision: #1 $
# $DateTime: 2012/03/19 12:39:43 $
# $Author: cliftm $
#
# Description
# Template file for reverse kinematic transforms
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# Mark Clift
# email: padmoz@tpg.com.au

# P    - PV prefix
# M    - CSMotor Name
# PORT - Asyn port name
# ADDR - CS motor (8-15)

#Reverse kinematic transforms
record(waveform,"$(P)$(M)_RTRANSFORMA_SP")
{
	field(DESC, "$(M) Reverse transform A")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEA_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMB_SP")
{
	field(DESC, "$(M) Reverse transform B")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEB_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMC_SP")
{
	field(DESC, "$(M) Reverse transform C")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEC_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMD_SP")
{
	field(DESC, "$(M) Reverse transform D")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSED_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORME_SP")
{
	field(DESC, "$(M) Reverse transform E")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEE_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMF_SP")
{
	field(DESC, "$(M) Reverse transform F")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEF_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMG_SP")
{
	field(DESC, "$(M) Reverse transform G")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEG_TRANSFORM")
}

record(waveform,"$(P)$(M)_RTRANSFORMH_SP")
{
	field(DESC, "$(M) Reverse transform H")
	field(PINI, "YES")
	field(NELM, "256")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR))CSMOTOR_REVERSEH_TRANSFORM")
}

# end
