# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_ctrl_extras.template $
# $Revision: #2 $
# $DateTime: 2012/03/22 11:20:44 $
# $Author: cliftm $
#
# Description
# Template file for controller extra commands/readbacks, that are additional to motor Record functionality
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# mark.clift@synchrotron.org.au
# 800 Blackburn Road, Clayton, Victoria 3168, Australia.
#

record(stringin,"$(P)MODEL_MON")
{
	field(DESC, "Ctrl model")
	field(DTYP, "asynOctetRead")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_MODEL")
}

record(stringin,"$(P)ADDRESS_MON")
{
	field(DESC, "Ctrl address")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_ADDRESS")
}

record(bi,"$(P)LIMITTYPE_STATUS")
{
	field(DESC, "Ctrl limit sw type")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "NO")
   	field(ZSV,  "NO_ALARM")

  	field(ONAM, "NC")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),0)CONTROLLER_LIMITTYPE")
}

record(bi,"$(P)HOMETYPE_STATUS")
{
	field(DESC, "Ctrl home sw type")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "NO")
   	field(ZSV,  "NO_ALARM")

  	field(ONAM, "NC")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),0)CONTROLLER_HOMETYPE")
}

record(bo,"$(P)LIMITTYPE_CMD")
{
	field(DESC,"Ctrl limit sw type")
	field(DTYP, "asynInt32")
	field(ZNAM,"NO")
	field(ZSV, "NO_ALARM")
	field(ONAM,"NC")
	field(OSV, "NO_ALARM")
	field(PINI,"YES")
	field(VAL, "$(DEFAULT_LIMITTYPE)")
	field(OUT, "@asyn($(PORT),0)CONTROLLER_LIMITTYPE")
	field(FLNK,"$(P)LIMITTYPE_STATUS")
}

record(bo,"$(P)HOMETYPE_CMD")
{
	field(DESC,"Ctrl home sw type")
	field(DTYP, "asynInt32")
	field(ZNAM,"NO")
	field(ZSV, "NO_ALARM")
	field(ONAM,"NC")
	field(OSV, "NO_ALARM")
	field(PINI,"YES")
	field(VAL, "$(DEFAULT_HOMETYPE)")
	field(OUT, "@asyn($(PORT),0)CONTROLLER_HOMETYPE")
	field(FLNK,"$(P)HOMETYPE_STATUS")
}

record(stringin,"$(P)ETHADDR_MON")
{
	field(DESC, "Ctrl Ethernet address")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_ETHADDR")
}

record(stringin,"$(P)SERIALNUM_MON")
{
	field(DESC, "Ctrl Serial Number")
	field(DTYP, "asynOctetRead")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_SERIALNUM")
}

record(bi,"$(P)COMMERR_STATUS")
{
	field(DESC, "Comm err")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ONAM, "Error")
   	field(OSV,  "MAJOR")
  	field(ZNAM, "OK")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_COMMERR")
}

record(bi,"$(P)SSICAPABLE_STATUS")
{
	field(DESC, "ssi capable")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(ONAM, "Yes")
   	field(OSV,  "NO_ALARM")
  	field(ZNAM, "No")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_SSICAPABLE")
}

record(bi,"$(P)PVTCAPABLE_STATUS")
{
	field(DESC, "pvt capable")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(ONAM, "Yes")
   	field(OSV,  "NO_ALARM")
  	field(ZNAM, "No")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_PVTCAPABLE")
}

#Defered moves support
record(bi,"$(P)DEFER_STATUS")
{
	field(DESC, "Deferred moves")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(ONAM, "Defer")
   	field(OSV,  "NO_ALARM")
  	field(ZNAM, "Go")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)MOTOR_DEFER_MOVES")
}

record(bo,"$(P)DEFER_CMD")
{
	field(DESC, "Deferred moves")
	field(DTYP, "asynInt32")
	field(ZNAM, "Go")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Defer")
	field(OSV,  "NO_ALARM")
	field(OUT,  "@asyn($(PORT),0)MOTOR_DEFER_MOVES")
	field(FLNK, "$(P)DEFER_STATUS")
}

record(bo,"$(P)UPLOAD_CMD")
{
	field(DESC, "Upload user arrays")
	field(DTYP, "asynInt32")
	field(ZNAM, "Upload")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Upload")
	field(OSV,  "NO_ALARM")
	field(OUT,  "@asyn($(PORT),0)CONTROLLER_UARRAY_UPLOAD")
}

record(bi,"$(P)UPLOAD_STATUS")
{
	field(DESC, "Upload array status")
	field(DTYP, "asynInt32")
	field(ZNAM, "Idle")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Uploading")
	field(OSV,  "NO_ALARM")
	field(SCAN, "I/O Intr")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_UARRAY_UPLOAD")
}

#Defered move mode
record(bi,"$(P)DEFER_MODE_STATUS")
{
	field(DESC, "Deferred move mode")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
  	field(ZNAM, "Sync start only")
  	field(ZSV,  "NO_ALARM")
	field(ONAM, "Sync start/stop")
   	field(OSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)CONTROLLER_DEFERRED_MODE")
}

record(bo,"$(P)DEFER_MODE_CMD")
{
	field(DESC, "Deferred move mode")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(ZNAM, "Sync start only")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Sync start/stop")
	field(OSV,  "NO_ALARM")
	field(OUT,  "@asyn($(PORT),0)CONTROLLER_DEFERRED_MODE")
	field(FLNK, "$(P)DEFER_MODE_STATUS")
}

#Coordinate system
record(bi,"$(P)COORDSYS_STATUS")
{
	field(DESC, "Coordinate sys")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(ONAM, "T")
   	field(OSV,  "NO_ALARM")
  	field(ZNAM, "S")
  	field(ZSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),0)COORDINATE_SYSTEM")
}

record(bo,"$(P)COORDSYS_CMD")
{
	field(DESC, "Coordinate sys")
	field(DTYP, "asynInt32")
	field(ZNAM, "S")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "T")
	field(OSV,  "NO_ALARM")
	field(OUT,  "@asyn($(PORT),0)COORDINATE_SYSTEM")
	field(FLNK, "$(P)COORDSYS_STATUS")
}

#Output compare records
record(ai,"$(P)OC1START_MON")
{
	field(DESC, "Output compare1 start")
	field(SCAN, "$(SCAN)")
	field(PREC, "3")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),0)OUTPUT_COMPARE_START")
}

record(ao,"$(P)OC1START_CMD")
{
	field(DESC, "Output compare1 start")
	field(PREC, "3")
	field(VAL,  "1")
	field(PINI, "YES")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),0)OUTPUT_COMPARE_START")
	field(FLNK, "$(P)OC1START_MON")
}

record(ai,"$(P)OC1INCR_MON")
{
	field(DESC, "Output compare1 incr")
	field(SCAN, "$(SCAN)")
	field(PREC, "3")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),0)OUTPUT_COMPARE_INCR")
}

record(ao,"$(P)OC1INCR_CMD")
{
	field(DESC, "Output compare1 incr")
	field(PREC, "3")
	field(VAL,  "1")
	field(PINI, "YES")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),0)OUTPUT_COMPARE_INCR")
	field(FLNK, "$(P)OC1INCR_MON")
}

record(mbbi,"$(P)OC1AXIS_STATUS")
{
	field(DESC, "Output compare1 axis")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "OFF")
	field(ONST, "A")
	field(TWST, "B")
	field(THST, "C")
	field(FRST, "D")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(INP,  "@asyn($(PORT),0)OUTPUT_COMPARE_AXIS")
}

record(mbbo,"$(P)OC1AXIS_CMD")
{
	field(DESC, "Output compare1 axis")
	field(DTYP, "asynInt32")
	field(ZRST, "OFF")
	field(ONST, "A")
	field(TWST, "B")
	field(THST, "C")
	field(FRST, "D")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(OUT,  "@asyn($(PORT),0)OUTPUT_COMPARE_AXIS")
	field(FLNK, "$(P)OC1AXIS_STATUS")
}

record(ai,"$(P)OC2START_MON")
{
	field(DESC, "Output compare2 start")
	field(SCAN, "$(SCAN)")
	field(PREC, "3")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),1)OUTPUT_COMPARE_START")
}

record(ao,"$(P)OC2START_CMD")
{
	field(DESC, "Output compare2 start")
	field(PREC, "3")
	field(DTYP, "asynFloat64")
	field(VAL,  "1")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),1)OUTPUT_COMPARE_START")
	field(FLNK, "$(P)OC2START_MON")
}

record(ai,"$(P)OC2INCR_MON")
{
	field(DESC, "Output compare2 incr")
	field(SCAN, "$(SCAN)")
	field(PREC, "3")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),1)OUTPUT_COMPARE_INCR")
}

record(ao,"$(P)OC2INCR_CMD")
{
	field(DESC, "Output compare2 incr")
	field(PREC, "3")
	field(VAL,  "1")
	field(PINI, "YES")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),1)OUTPUT_COMPARE_INCR")
	field(FLNK, "$(P)OC2INCR_MON")
}

record(mbbi,"$(P)OC2AXIS_STATUS")
{
	field(DESC, "Output compare2 axis")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "OFF")
	field(ONST, "E")
	field(TWST, "F")
	field(THST, "G")
	field(FRST, "H")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(INP,  "@asyn($(PORT),1)OUTPUT_COMPARE_AXIS")
}

record(mbbo,"$(P)OC2AXIS_CMD")
{
	field(DESC, "Output compare2 axis")
	field(DTYP, "asynInt32")
	field(ZRST, "OFF")
	field(ONST, "E")
	field(TWST, "F")
	field(THST, "G")
	field(FRST, "H")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(OUT,  "@asyn($(PORT),1)OUTPUT_COMPARE_AXIS")
	field(FLNK, "$(P)OC2AXIS_STATUS")
}

record(waveform,"$(P)OCMESSAGE_MON")
{
	field(DESC, "Output compare mesg")
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),0)OUTPUT_COMPARE_MESSAGE")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(SCAN, "I/O Intr")
}

#Controller message records
record(waveform,"$(P)ERROR_MON")
{
	field(SCAN, "I/O Intr")
	field(DESC, "Controller error")
	field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(INP,  "@asyn($(PORT),0)CONTROLLER_ERROR")
}

#Command console records
record(stringout,"$(P)SEND_STR_CMD")
{
	field(DESC, "Send Any Command to Controller")
	field(OMSL, "supervisory")
	field(DTYP, "asynOctetWrite")
	field(OUT,  "@asyn($(PORT),0)USER_OCTET")
}

record(waveform,"$(P)SEND_STR_MON")
{
	field(SCAN, "I/O Intr")
	field(DESC, "Output of last SEND_CMD_STR")
	field(DTYP, "asynOctetRead")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(INP,  "@asyn($(PORT),0)USER_OCTET")
}

record(ai,"$(P)SEND_STRVAL_MON")
{
	field(SCAN, "I/O Intr")
	field(PREC, "$(PREC)")
	field(DESC, "Output of last SEND_CMD_STR")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),0)USER_OCTET_VAL")
}

#end
