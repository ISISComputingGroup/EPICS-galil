# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_motor_extras.template $
# $Revision: #1 $
# $DateTime: 2012/03/19 12:39:43 $
# $Author: cliftm $
#
# Description
# Template file for motor extra commands/readbacks, that are additional to motor Record functionality
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# mark.clift@synchrotron.org.au
# 800 Blackburn Road, Clayton, Victoria 3168, Australia.
#

record(scalcout, "$(P):$(M):MANAGERMODE")
{
    field(ASG, "READONLY")
    field(DESC, "Non-zero if manager is required")
    field(PINI, "YES")
    field(INPA, "$(PVPREFIX)CS:MANAGER CP")
    field(BB, "$(ASG)")
    field(CALC, "A = 0 && BB = 'MANAGER'")
    field(OOPT, "Every Time")
}

#Below records are used to extract data from MR
#and pass to driver
record(ao,"$(P):$(M)_ACCL_SP") {
    field(DESC, "Motor record ACCL")
    field(DOL,  "$(P):$(M).ACCL CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_ACCL")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_VMAX_SP") {
    field(DESC, "Motor record VMAX")
    field(DOL,  "$(P):$(M).VMAX CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_VMAX")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_VELO_SP") {
    field(DESC, "Motor record VELO")
    field(DOL,  "$(P):$(M).VELO CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_VELO")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_OFF_SP") {
    field(DESC, "Motor record OFF")
    field(DOL,  "$(P):$(M).OFF CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_OFF")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_MRES_SP") {
    field(DESC, "Motor record MRES")
    field(DOL,  "$(P):$(M).MRES CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_RESOLUTION")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_ERES_SP") {
    field(DESC, "Motor record ERES")
    field(DOL,  "$(P):$(M).ERES CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_ERES")
    field(PREC, "$(PREC)")
}

record(ao,"$(P):$(M)_MOT_ENC_SYNC_TOL_SP") {
    field(DESC, "Motor encoder sync tol")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_ENC_TOL")
    field(PREC, "$(PREC)")
	field(EGU, "$(EGU)")
	field(VAL, "0")
	field(PINI, "YES")
}

record(bo,"$(P):$(M)_DIR_SP") {
    field(DESC, "Motor record DIR")
    field(DOL,  "$(P):$(M).DIR CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynInt32")
    field(ZNAM, "Pos")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Neg")
    field(OSV,  "NO_ALARM")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_DIR")
}

record(bo,"$(P):$(M)_UEIP_SP") {
    field(DESC, "Motor record UEIP")
    field(DOL,  "$(P):$(M).UEIP CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynInt32")
    field(ZNAM, "No")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_UEIP")
}

record(stringout,"$(P):$(M)_PREM_CMD")
{
	field(DESC, "Motor record PREM")
	field(OMSL, "closed_loop")
	field(DTYP, "asynOctetWrite")
	field(DOL,  "$(P):$(M).PREM CP MS")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_PREM")
}

record(stringout,"$(P):$(M)_POST_CMD")
{
	field(DESC, "Motor record POST")
	field(OMSL, "closed_loop")
	field(DTYP, "asynOctetWrite")
	field(DOL,  "$(P):$(M).POST CP MS")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_POST")
}

#driver to mr command to stop/go
#motors in coordsys
#set initial value of 3 so if running with motor simulator we don't get all motors in STOP 
record(ai,"$(P):$(M)_STOPGO_MON")
{
	field(DESC, "stop/go")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_STOPGO")
	field(VAL, 3)
}

record(ao, "$(P):$(M)_STOPGO_CMD") 
{
	field(OMSL, "closed_loop") 
	field(DOL,  "$(P):$(M)_STOPGO_MON CP MS")
	field(OUT,  "$(P):$(M).SPMG CA")
}

# monitor the motor status and update a string field with results
record(aSub, "$(P):$(M):_MSTACALC")
{
    field(SNAM, "displayMotorMSTA")
	field(INPA, "$(P):$(M).MSTA CP")
	field(FTA, "ULONG")
	field(OUTA, "$(P):$(M)_MSTA_STR PP")
	field(FTVA, "CHAR")
	field(NOVA, "512")	
}

record(waveform, "$(P):$(M)_MSTA_STR")
{
	field(NELM, "512")
	field(FTVL, "CHAR")
	field(DESC, "Text version of motor MSTA")
}

record(aSub, "$(P):$(M):_STATUSCALC")
{
    field(SNAM, "displayMotorMSTASimple")
	field(INPA, "$(P):$(M).MSTA CP")
	field(FTA, "ULONG")
	field(OUTA, "$(P):$(M)_STATUS PP")
	field(FTVA, "STRING")
	field(NOVA, "1")	
}

record(stringin, "$(P):$(M)_STATUS")
{
	field(DESC, "Simple Text version of motor MSTA")
}

record(stringin, "$(P):$(M)_MTR")
{
    field(VAL, "$(M)")
}

record(aSub,"$(P):$(M)_ERRCALC")
{
    field(SNAM,"checkMotorError")
    field(SCAN,"Passive")
    field(INPA,"$(P):$(M).MSTA CP")
	field(FTA, "ULONG")
    field(INPB,"$(P):$(M).LVIO CP")
	field(FTB, "SHORT")
    field(INPC,"$(P):$(M).HLS CP")
	field(FTC, "SHORT")
    field(INPD,"$(P):$(M).LLS CP")
	field(FTD, "SHORT")
    field(INPE,"$(P):$(M).STAT CP")
	field(FTE, "USHORT")
    field(INPF,"$(P):$(M).SEVR CP")
	field(FTF, "USHORT")
    field(INPG,"$(P):$(M)_MTR")
	field(FTG, "STRING")
	field(FTVA, "STRING")
	field(FTVB, "ULONG")
	# we want to process _ERRCALC_FAN only if the error message changes, so use OUTA not FLNK
	# but strings outputs cannot be used to write to .PROC fields, so need to use intermediate string record 
	field(OUTA, "$(P):$(M)_ERRCALC_MESS PP")
}

record(stringout, "$(P):$(M)_ERRCALC_MESS")
{
}

record(stringout, "$(P):$(M)_PERROR")
{
    field(OMSL, "closed_loop")
    field(DOL, "$(P):$(M)_ERRCALC_MESS CP")
    field(DTYP, "stdio")
    field(OUT, "@errlog")
}

# Expose the DMOV field as a PV record, so it can be access from a block
record(ai,"$(P):$(M):DMOV")
{
	field(DESC, "Done move?")
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(INP, "$(P):$(M).DMOV CP")
}

# Allow setting MRES/ERES as inverse

record(ao, "$(P):$(M):INV_MRES")
{
	field(DESC, "Set the motor res in steps per EGU")
	field(FLNK, "$(P):$(M):INV_MRES:SP_CALC")
	field(PREC, "3")
}

record(calcout, "$(P):$(M):INV_MRES:SP_CALC")
{
	field(INPA, "$(P):$(M):INV_MRES")
	field(CALC, "1/A")
	field(OUT, "$(P):$(M).MRES")
	field(OOPT, "On Change")
}

record(calcout, "$(P):$(M):INV_MRES_CALC")
{
	field(INPA, "$(P):$(M).MRES CP")
	field(CALC, "1/A")
	field(OUT, "$(P):$(M):INV_MRES PP")
	field(OOPT, "On Change")
}

record(ao, "$(P):$(M):INV_ERES")
{
	field(DESC, "Set the encoder res in steps per EGU")
	field(FLNK, "$(P):$(M):INV_ERES:SP_CALC")
	field(PREC, "3")
}

record(calcout, "$(P):$(M):INV_ERES:SP_CALC")
{
	field(INPA, "$(P):$(M):INV_ERES")
	field(CALC, "1/A")
	field(OUT, "$(P):$(M).ERES")
	field(OOPT, "On Change")
}

record(calcout, "$(P):$(M):INV_ERES_CALC")
{
	field(INPA, "$(P):$(M).ERES CP")
	field(CALC, "1/A")
	field(OUT, "$(P):$(M):INV_ERES PP")
	field(OOPT, "On Change")
}

record(bi,"$(P):$(M)_SCONN_STATUS")
{
	field(DESC, "SSI connection status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
   	field(ZSV,  "MAJOR")

  	field(ONAM, "Connected")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSI_CONNECTED")
}

record(bi,"$(P):$(M)_ESTALL_STATUS")
{
	field(DESC, "Encoder stall status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Working Ok")
   	field(ZSV,  "NO_ALARM")

  	field(ONAM, "Stalled")
  	field(OSV,  "MAJOR")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL")
}

#Time encoder stopped before declaring stall
record(ai,"$(P):$(M)_ESTALLTIME_MON")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "s")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
}

record(ao,"$(P):$(M)_ESTALLTIME_SP")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(EGU, "s")
	field(VAL, ".001")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
	field(FLNK,"$(P):$(M)_ESTALLTIME_MON")
}

#This function also populates mr MSTA bit 15 homed.
record(bi,"$(P):$(M)_HOMED_STATUS")
{
	field(DESC, "homed status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "No")
   	field(ZSV,  "MINOR")

  	field(ONAM, "Yes")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_HOMED")
}

record(ai,"$(P):$(M)_STEPSMOOTH_MON")
{
	field(DESC,"Step smoothing")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "$(EGU)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
}

record(ao,"$(P):$(M)_STEPSMOOTH_SP")
{
	field(DESC, "Step smooth sp")
	field(DTYP, "asynFloat64")
	field(DRVL, "0.5")
	field(DRVH, "16.0")
	field(PREC, "$(PREC)")
	field(PINI, "YES")
	field(VAL,  "1.313")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
	field(FLNK,"$(P):$(M)_STEPSMOOTH_MON")
}

record(ai,"$(P):$(M)_EDEL_MON")
{
	field(DESC,"Encoder deadband")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_EDEL")
}

record(ao,"$(P):$(M)_EDEL_SP")
{
	field(DESC,"encoder deadb")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, ".001")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_EDEL")
	field(FLNK,"$(P):$(M)_EDEL_MON")
}

##
## converters for new ENC_TOLERANCE records
## these were like EDEL but in counts
##
## if we have a non-zero value, assume from autosave
## as a result of sawapping new -> old driver
##
record(longout,"$(P):$(M)_ENC_TOLERANCE_SP")
{
    field(EGU, "count")
    field(VAL, "0")
    field(PINI, "YES")
    field(FLNK, "$(P):$(M)_ENC_TOLERANCE_SP_")
}

record(calcout,"$(P):$(M)_ENC_TOLERANCE_SP_")
{
    field(INPA, "$(P):$(M)_ENC_TOLERANCE_SP")
    field(INPB, "$(P):$(M).ERES")
    field(CALC, "A * B")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P):$(M)_EDEL_SP PP")
}

record(longin,"$(P):$(M)_ENC_TOLERANCE_MON")
{
    field(EGU, "count")
}

record(calcout,"$(P):$(M)_ENC_TOLERANCE_MON_")
{
    field(INPA, "$(P):$(M)_EDEL_MON CP")
    field(INPB, "$(P):$(M).ERES CP")
    field(CALC, "B != 0 ? A/B : 0")
    field(OUT, "$(P):$(M)_ENC_TOLERANCE_MON PP")
}


####

record(bi,"$(P):$(M)_MCONN_STATUS")
{
	field(DESC, "Connect stat")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
	field(ZSV,  "MINOR")
	field(ONAM, "Connected")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MCONN")
}

record(bi,"$(P):$(M)_UINDEX_STATUS")
{
	field(DESC, "use index")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Yes")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_USEINDEX")
}

record(bo,"$(P):$(M)_UINDEX_CMD")
{
	field(DESC,"use index")
	field(DTYP,"asynInt32")
	field(VAL, "1")
	field(PINI,"YES")
	field(ZNAM,"No")
	field(ZSV, "NO_ALARM")
	field(ONAM,"Yes")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_USEINDEX")
	field(FLNK,"$(P):$(M)_UINDEX_STATUS")
}

record(bi,"$(P):$(M)_JAH_STATUS")
{
	field(DESC, "Jog after home")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Yes")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME")
}

record(bo,"$(P):$(M)_JAH_CMD")
{
	field(DESC,"Jog after home")
	field(DTYP,"asynInt32")
	field(VAL, "0")
	field(PINI,"YES")
	field(ZNAM,"No")
	field(ZSV, "NO_ALARM")
	field(ONAM,"Yes")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME")
	field(FLNK,"$(P):$(M)_JAH_STATUS")
}

record(ai,"$(P):$(M)_JAHV_MON")
{
	field(DESC,"Jog after home val")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME_VALUE")
}

record(ao,"$(P):$(M)_JAHV_SP")
{
	field(DESC,"Jog after home val")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, "1")
	field(PINI,"YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME_VALUE")
	field(FLNK,"$(P):$(M)_JAHV_MON")
}

record(ai,"$(P):$(M)_EGUAFTLIMIT_MON")
{
	field(DESC,"Egu after limit")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTLIMIT")
}

record(ao,"$(P):$(M)_EGUAFTLIMIT_SP")
{
	field(DESC,"EGU after limit")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, "0.001")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTLIMIT")
	field(FLNK,"$(P):$(M)_EGUAFTLIMIT_MON")
}

record(ai,"$(P):$(M)_HOMEVAL_MON")
{
	field(DESC,"Home value")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
}

record(ao,"$(P):$(M)_HOMEVAL_SP")
{
	field(DESC,"Home value")
	field(VAL, "0")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
	field(FLNK,"$(P):$(M)_HOMEVAL_MON")
}

record(mbbi,"$(P):$(M)_SSIINPUT_STATUS")
{
	field(DESC, "ssi input")
	field(SCAN,"$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
}

record(ai,"$(P):$(M)_SSITOTBITS_MON")
{
	field(DESC,"SSI totalbits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
}

record(ai,"$(P):$(M)_SSISINGLETBITS_MON")
{
	field(DESC,"SSI singleturn bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
}

record(ai,"$(P):$(M)_SSIERRBITS_MON")
{
	field(DESC,"SSI err bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
}

record(ai,"$(P):$(M)_SSITIME_MON")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
}

record(bi,"$(P):$(M)_SSIDATA_STATUS")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(ONAM,"Gray")
	field(ZNAM,"Binary")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
}

record(mbbo,"$(P):$(M)_SSIINPUT_CMD")
{
	field(DESC, "ssi input")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
}

record(ao,"$(P):$(M)_SSITOTBITS_SP")
{
	field(DESC,"ssi total bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "25")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
}

record(ao,"$(P):$(M)_SSISINGLETBITS_SP")
{
	field(DESC,"ssi single turn bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "13")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
}

record(ao,"$(P):$(M)_SSIERRBITS_SP")
{
	field(DESC,"ssi err bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "0")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
}

record(ao,"$(P):$(M)_SSITIME_SP")
{
	field(DESC,"ssi timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "13")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
}

record(bo,"$(P):$(M)_SSIDATA_CMD")
{
	field(DESC,"ssi dataform")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(ONAM,"Gray")
	field(ZNAM,"Binary")
	field(VAL, "0")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
}

record(ao,"$(P):$(M)_ERRLIMIT_SP")
{
	field(DESC,"error limit")
	field(PINI,"YES")
	field(VAL, "16384")
	field(EGU, "count")
	field(DTYP,"asynFloat64")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
	field(FLNK,"$(P):$(M)_ERRLIMIT_MON")
}

record(ai,"$(P):$(M)_ERRLIMIT_MON")
{
	field(DESC,"error limit")
	field(PINI,"YES")
	field(EGU, "count")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
}

record(ai,"$(P):$(M)_ERR_MON")
{
	field(DESC, "error limit")
	field(EGU,  "count")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ERR")
}

record(mbbo,"$(P):$(M)_OFFONERR_CMD")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
	field(FLNK, "$(P):$(M)_OFFONERR_STATUS")
}

record(mbbi,"$(P):$(M)_OFFONERR_STATUS")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
}

record(mbbi,"$(P):$(M)_AXIS_STATUS")
{
	field(DESC, "Axis chan")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(DTYP, "asynInt32")
	field(ZRST, "A")
	field(ONST, "B")
	field(TWST, "C")
	field(THST, "D")
	field(FRST, "E")
	field(FVST, "F")
	field(SXST, "G")
	field(SVST, "H")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AXIS")
}

record(mbbo,"$(P):$(M)_MTRTYPE_CMD")
{
	field(DESC, "mtr type")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
	field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(VAL,  "$(MTRTYPE)")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
	field(FLNK, "$(P):$(M)_MTRTYPE_CMD_FAN")
}

record(fanout, "$(P):$(M)_MTRTYPE_CMD_FAN")
{
	field(SELM, "All")
	#Changing motor type can change aux encoder also
	field(LNK1, "$(P):$(M)_MTRTYPE_STATUS")
	field(LNK2, "$(P):$(M)_AENCTYPE_STATUS")
}

record(mbbi,"$(P):$(M)_MTRTYPE_STATUS")
{
	field(DESC, "mtr type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
	field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
}

record(mbbo,"$(P):$(M)_MENCTYPE_CMD")
{
	field(DESC, "main enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
	field(FLNK, "$(P):$(M)_MENCTYPE_STATUS")
}

record(mbbi,"$(P):$(M)_MENCTYPE_STATUS")
{
	field(DESC, "main enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
}

record(mbbo,"$(P):$(M)_AENCTYPE_CMD")
{
	field(DESC, "Aux enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
	field(THVL, "12")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
	field(FLNK, "$(P):$(M)_AENCTYPE_STATUS")
}

record(mbbi,"$(P):$(M)_AENCTYPE_STATUS")
{
	field(DESC, "Aux enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
	field(THVL, "12")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
}

record(bo,"$(P):$(M)_WLP_CMD")
{
	field(DESC, "wrong limit protect")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "1")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")	
	field(FLNK, "$(P):$(M)_WLP_STATUS")
}

record(bi,"$(P):$(M)_WLP_STATUS")
{
	field(DESC, "wrong limit protect")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")
}

record(bi,"$(P):$(M)_WLPACTIVE_STATUS")
{
	field(DESC, "wlp activated")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
  	field(ONAM, "Stopped!")
	field(OSV,  "MAJOR")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP_ACTIVE")
}

#Motor power auto on/off between moves
record(bo,"$(P):$(M)_AUTOONOFF_CMD")
{
	field(DESC, "mtr auto on/off")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONOFF")
	field(FLNK, "$(P):$(M)_AUTOONOFF_STATUS")
}

record(bi,"$(P):$(M)_AUTOONOFF_STATUS")
{
	field(DESC, "mtr auto on/off")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONOFF")
}

#Motor auto power on delay
record(ai,"$(P):$(M)_ONDELAY_MON")
{
	field(DESC, "mtr pwr on dly")
	field(DTYP, "asynFloat64")
	field(SCAN, "$(SCAN)")
	field(PREC, "$(PREC)")
	field(EGU,  "s")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONDELAY")
}

record(ao,"$(P):$(M)_ONDELAY_SP")
{
	field(DESC, "mtr pwr on dly")
	field(DTYP, "asynFloat64")
	field(PREC, "$(PREC)")
	field(EGU,  "s")
	field(VAL,  ".2")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONDELAY")
	field(FLNK, "$(P):$(M)_ONDELAY_MON")
}

#Motor auto power off delay
record(ai,"$(P):$(M)_OFFDELAY_MON")
{
	field(DESC, "mtr pwr off dly")
	field(DTYP, "asynFloat64")
	field(SCAN, "$(SCAN)")
	field(PREC, "$(PREC)")
	field(EGU,  "s")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_OFFDELAY")
}

record(ao,"$(P):$(M)_OFFDELAY_SP")
{
	field(DESC, "mtr pwr off dly")
	field(DTYP, "asynFloat64")
	field(PREC, "$(PREC)")
	field(EGU,  "s")
	field(VAL,  ".2")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_OFFDELAY")
	field(FLNK, "$(P):$(M)_OFFDELAY_MON")
}

record(bi,"$(P):$(M)_ON_STATUS")
{
	field(DESC, "Mtr on status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Off")
   	field(ZSV,  "MINOR")
  	field(ONAM, "On")
  	field(OSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ONOFF")
}

#This mbbi/mbbo is deliberately last, so motor on/off function is 
#always after other defaults have been set (eg. Limits, and encoder)
record(mbbo,"$(P):$(M)_ON_CMD")
{
	field(DESC, "Motor on cmd")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "On")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(PINI, "YES")
	field(VAL,  "$(MTRON)")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_ONOFF")
	field(FLNK, "$(P):$(M)_ON_STATUS")
}

## if we don't send moves in the usual way, put a string here and %f will be replaced by
## the position requested and sent to the galil
record(stringout,"$(P):$(M)_MOVE_CMD")
{
	field(DESC, "Special Motor Move cmd")
	field(DTYP, "asynOctetWrite")
	field(PINI, "YES")
	field(VAL,  "")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOVE_COMMAND")
}

##
## calculate the live difference between motor and encoder position
## only calculate if UEIP (E) is true and an encoder is also actually
## present (as per relevant MSTA bit, F&256)
## In addition only calculate when moving (G == 0) to avoid noisy
## encoder post move triggering recording. Store calculation
## result in H so if moving (G != 0) can return previous calc value
##
record(calcout,"$(P):$(M)_MTRENC_DIFF")
{
	field(DESC, "In motion encoder motor difference")
	field(INPA, "$(P):$(M).RMP CP")
	field(INPB, "$(P):$(M).MRES CP")
	field(INPC, "$(P):$(M).REP CP")
	field(INPD, "$(P):$(M).ERES CP")
	field(INPE, "$(P):$(M).UEIP CP")
	field(INPF, "$(P):$(M).MSTA CP")
	field(INPG, "$(P):$(M).DMOV CP")
	field(CALC, "H:=(G=0?((E&&(F&256))?(ABS(A*B)-ABS(C*D)):0):H);H")
}

##
## determine the difference between motor and encoder position
## when motion complete
##
record(calcout,"$(P):$(M)_MTRENC_DRIFT_")
{
	field(DESC, "Encoder motor drift calc")
	field(INPA, "$(P):$(M)_MTRENC_DIFF CP")
	field(INPB, "$(P):$(M).DMOV CP")
	field(CALC, "B")
	field(OOPT, "When Non-zero")
	field(DOPT, "Use OCAL")
	field(OCAL, "A")
	field(OUT, "$(P):$(M)_MTRENC_DRIFT PP")
}

##
## record difference between motor and encoder position when motion complete
##
record(ai,"$(P):$(M)_MTRENC_DRIFT")
{
    field(DESC, "Encoder motor drift")
    field(EGU, "$(EGU)")
    info(archive, "VAL")
}

## Hold the threshold value
record(ao, "$(P):$(M)_THRESHOLD")
{
   field(DESC, "Encoder and motor threshold")
   field(EGU, "$(EGU)")
   field(PREC, 6)
   field(VAL, 0)
}

record(calcout, "$(P):$(M)_DEFAULT_THRESHOLD")
{
    field(DESC, "Default threshold")
    field(INPA, "$(P):$(M).MRES CP")
    field(INPB, "$(P):$(M).ERES CP")
    field(INPC, "$(P):$(M)_THRESHOLD")
    field(CALC, "C=0?(10*(A>B?A:B)):C")
    field(OUT, "$(P):$(M)_THRESHOLD PP")
    field(EGU, "$(EGU)")
}

##
## check if the drift is above the threshold limit
##
record(calcout, "$(P):$(M)_DRIFT_THRESHOLD_CHECK")
{
    field(DESC, "Drift and threshold check")
    field(INPA, "$(P):$(M)_THRESHOLD.VAL CP")
    field(INPB, "$(P):$(M)_MTRENC_DRIFT.VAL CP")
    field(CALC, "B>A")
    
}

#end
