# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_motor_extras.template $
# $Revision: #1 $
# $DateTime: 2012/03/19 12:39:43 $
# $Author: cliftm $
#
# Description
# Template file for motor extra commands/readbacks, that are additional to motor Record functionality
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# mark.clift@synchrotron.org.au
# 800 Blackburn Road, Clayton, Victoria 3168, Australia.
#

record(bi,"$(P):$(M)_SCONN_STATUS")
{
	field(DESC, "SSI connection status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
   	field(ZSV,  "MAJOR")

  	field(ONAM, "Connected")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSI_CONNECTED")
}

record(bi,"$(P):$(M)_ESTALL_STATUS")
{
	field(DESC, "Encoder stall status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Working Ok")
   	field(ZSV,  "NO_ALARM")

  	field(ONAM, "Stalled")
  	field(OSV,  "MAJOR")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL")
}

#Time encoder stopped before declaring stall
record(ai,"$(P):$(M)_ESTALLTIME_MON")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
}

record(ao,"$(P):$(M)_ESTALLTIME_SP")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(VAL, ".001")
	field(PINI, "YES")
        field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
}

#This function also populates mr MSTA bit 15 homed.
#Polled as this info is not part of Galil data record
record(bi,"$(P):$(M)_HOMED_STATUS")
{
	field(DESC, "homed status")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
   	field(ZSV,  "MINOR")

  	field(ONAM, "Yes")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_HOMED")
}

record(ai,"$(P):$(M)_STEPSMOOTH_MON")
{
	field(DESC,"Step smoothing")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "$(EGU)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
}

record(ao,"$(P):$(M)_STEPSMOOTH_SP")
{
	field(DESC, "Step smooth sp")
	field(DTYP, "asynFloat64")
	field(DRVL, "0.5")
	field(DRVH, "16.0")
	field(PREC, "$(PREC)")
	field(PINI, "YES")
	field(VAL,  "1.313")
        field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
}

record(ai,"$(P):$(M)_EDEL_MON")
{
	field(DESC,"Encoder deadband")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_EDEL")
}

record(ao,"$(P):$(M)_EDEL_SP")
{
	field(DESC,"encoder deadb")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, ".001")
	field(PINI, "YES")
        field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_EDEL")
}

record(bi,"$(P):$(M)_MCONN_STATUS")
{
	field(DESC, "Connect stat")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
	field(ZSV,  "MINOR")
	field(ONAM, "Connected")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MCONN")
}

record(bi,"$(P):$(M)_PHOME_STATUS")
{
	field(DESC, "prog home")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "On")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_PHOME")
}

record(bo,"$(P):$(M)_PHOME_CMD")
{
	field(DESC,"prog home")
	field(DTYP,"asynInt32")
	field(VAL, "1")
	field(PINI,"YES")
	field(ZNAM,"Off")
	field(ZSV, "NO_ALARM")
	field(ONAM,"On")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_PHOME")
}

record(ai,"$(P):$(M)_EGUAFTLIMIT_MON")
{
	field(DESC,"Egu after limit")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTLIMIT")
}

record(ao,"$(P):$(M)_EGUAFTLIMIT_SP")
{
	field(DESC,"EGU after limit")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, "0.001")
	field(PINI, "YES")
        field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTLIMIT")
}

record(ai,"$(P):$(M)_HOMEVAL_MON")
{
	field(DESC,"Home value")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
}

record(ao,"$(P):$(M)_HOMEVAL_SP")
{
	field(DESC,"Home value")
	field(VAL, "0")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
}

record(mbbi,"$(P):$(M)_SSIINPUT_STATUS")
{
	field(DESC, "ssi input")
	field(SCAN,"$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
}

record(ai,"$(P):$(M)_SSITOTBITS_MON")
{
	field(DESC,"SSI totalbits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
}

record(ai,"$(P):$(M)_SSISINGLETBITS_MON")
{
	field(DESC,"SSI singleturn bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
}

record(ai,"$(P):$(M)_SSIERRBITS_MON")
{
	field(DESC,"SSI err bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
}

record(ai,"$(P):$(M)_SSITIME_MON")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
}

record(bi,"$(P):$(M)_SSIDATA_STATUS")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(ONAM,"Gray")
	field(ZNAM,"Binary")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
}

record(mbbo,"$(P):$(M)_SSIINPUT_CMD")
{
	field(DESC, "ssi input")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
}

record(ao,"$(P):$(M)_SSITOTBITS_SP")
{
	field(DESC,"ssi total bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "25")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
}

record(ao,"$(P):$(M)_SSISINGLETBITS_SP")
{
	field(DESC,"ssi single turn bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "13")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
}

record(ao,"$(P):$(M)_SSIERRBITS_SP")
{
	field(DESC,"ssi err bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "0")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
}

record(ao,"$(P):$(M)_SSITIME_SP")
{
	field(DESC,"ssi timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(VAL, "13")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
}

record(bo,"$(P):$(M)_SSIDATA_CMD")
{
	field(DESC,"ssi dataform")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(ONAM,"Gray")
	field(ZNAM,"Binary")
	field(VAL, "0")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
}

record(ao,"$(P):$(M)_ERRLIMIT_SP")
{
	field(DESC,"error limit")
	field(PINI,"YES")
        field(VAL, "16384")
	field(EGU, "cts")
	field(DTYP,"asynFloat64")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
}

record(ai,"$(P):$(M)_ERRLIMIT_MON")
{
	field(DESC,"error limit")
	field(PINI,"YES")
	field(EGU, "cts")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
}

record(ai,"$(P):$(M)_ERR_MON")
{
	field(DESC, "error limit")
	field(EGU,  "cts")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ERR")
}

record(mbbo,"$(P):$(M)_OFFONERR_CMD")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
        field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
}

record(mbbi,"$(P):$(M)_OFFONERR_STATUS")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
        field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
}

record(mbbi,"$(P):$(M)_AXIS_STATUS")
{
	field(DESC, "Axis chan")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(DTYP, "asynInt32")
	field(ZRST, "A")
	field(ONST, "B")
	field(TWST, "C")
        field(THST, "D")
        field(FRST, "E")
        field(FVST, "F")
        field(SXST, "G")
        field(SVST, "H")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
        field(SXVL, "6")
        field(SVVL, "7")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AXIS")

}

record(mbbo,"$(P):$(M)_MTRTYPE_CMD")
{
	field(DESC, "mtr type")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
        field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
        field(FRVL, "4")
        field(FVVL, "5")
	field(VAL,  "$(MTRTYPE)")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
}

record(mbbi,"$(P):$(M)_MTRTYPE_STATUS")
{
	field(DESC, "mtr type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
        field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
        field(FRVL, "4")
        field(FVVL, "5")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
}

record(mbbo,"$(P):$(M)_MENCTYPE_CMD")
{
	field(DESC, "main enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
        field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
}

record(mbbi,"$(P):$(M)_MENCTYPE_STATUS")
{
	field(DESC, "main enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
        field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
        field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
}

record(mbbo,"$(P):$(M)_AENCTYPE_CMD")
{
	field(DESC, "Aux enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
        field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
        field(THVL, "12")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
}

record(mbbi,"$(P):$(M)_AENCTYPE_STATUS")
{
	field(DESC, "Aux enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
        field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
        field(THVL, "12")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
}

record(bo,"$(P):$(M)_WLP_CMD")
{
	field(DESC, "wrong limit protect")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "1")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")
}

record(bi,"$(P):$(M)_WLP_STATUS")
{
	field(DESC, "wrong limit protect")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")
}

record(bi,"$(P):$(M)_WLPACTIVE_STATUS")
{
	field(DESC, "wlp activated")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
  	field(ONAM, "Stopped!")
	field(OSV,  "MAJOR")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP_ACTIVE")
}

record(bi,"$(P):$(M)_ON_STATUS")
{
	field(DESC, "Mtr on status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Off")
   	field(ZSV,  "MINOR")
  	field(ONAM, "On")
  	field(OSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ONOFF")
}

#This mbbi/mbbo is deliberately last, so motor on/off function is 
#always after other defaults have been set (eg. Limits, and encoder)
record(mbbo,"$(P):$(M)_ON_CMD")
{
	field(DESC,"Motor on cmd")
	field(DTYP,"asynInt32")
	field(ZRST, "Off")
	field(ONST, "On")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(PINI, "YES")
	field(VAL, "$(MTRON)")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ONOFF")
}

#end
