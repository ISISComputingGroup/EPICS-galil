# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_motor_extras.template $
# $Revision: #1 $
# $DateTime: 2012/03/19 12:39:43 $
# $Author: cliftm $
#
# Description
# Template file for motor extra commands/readbacks, that are additional to motor Record functionality
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# mark.clift@synchrotron.org.au
# 800 Blackburn Road, Clayton, Victoria 3168, Australia.
#

record(bi,"$(P)$(M)_SCONN_STATUS")
{
	field(DESC, "SSI connection status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
   	field(ZSV,  "MAJOR")

  	field(ONAM, "Connected")
  	field(OSV,  "NO_ALARM")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSI_CONNECTED")
}

record(bi,"$(P)$(M)_ESTALL_STATUS")
{
	field(DESC, "Encoder stall status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Working Ok")
   	field(ZSV,  "NO_ALARM")

  	field(ONAM, "Stalled")
  	field(OSV,  "MAJOR")

   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_STATUS_SLIP")
}

#Time encoder stopped before declaring stall
record(ai,"$(P)$(M)_ESTALLTIME_MON")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
}

record(ao,"$(P)$(M)_ESTALLTIME_SP")
{
	field(DESC,"estall time")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(VAL, ".2")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ENCODER_STALL_TIME")
	field(FLNK,"$(P)$(M)_ESTALLTIME_MON")
}

record(ai,"$(P)$(M)_STEPSMOOTH_MON")
{
	field(DESC,"Step smoothing")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
}

record(ao,"$(P)$(M)_STEPSMOOTH_SP")
{
	field(DESC, "Step smooth sp")
	field(DTYP, "asynFloat64")
	field(DRVL, "0.5")
	field(DRVH, "16.0")
	field(PREC, "$(PREC)")
	field(PINI, "YES")
	field(VAL,  "1.313")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_STEPSMOOTH")
	field(FLNK,"$(P)$(M)_STEPSMOOTH_MON")
}

record(bi,"$(P)$(M)_MCONN_STATUS")
{
	field(DESC, "Connect stat")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Disconnected")
	field(ZSV,  "MINOR")
	field(ONAM, "Connected")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MCONN")
}

record(bi,"$(P)$(M)_UINDEX_STATUS")
{
	field(DESC, "use index")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Yes")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_USEINDEX")
}

record(bo,"$(P)$(M)_UINDEX_CMD")
{
	field(DESC,"use index")
	field(DTYP,"asynInt32")
	field(VAL, "1")
	field(PINI,"YES")
	field(ZNAM,"No")
	field(ZSV, "NO_ALARM")
	field(ONAM,"Yes")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_USEINDEX")
	field(FLNK,"$(P)$(M)_UINDEX_STATUS")
}

record(bi,"$(P)$(M)_USWITCH_STATUS")
{
	field(DESC, "use switch")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Yes")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_USESWITCH")
}

record(bo,"$(P)$(M)_USWITCH_CMD")
{
	field(DESC,"use switch")
	field(DTYP,"asynInt32")
	field(VAL, "1")
	field(PINI,"YES")
	field(ZNAM,"No")
	field(ZSV, "NO_ALARM")
	field(ONAM,"Yes")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_USESWITCH")
	field(FLNK,"$(P)$(M)_USWITCH_STATUS")
}

record(ai,"$(P)$(M)_USERDATA_MON")
{
	field(DESC, "User data")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(PREC, "$(PREC)")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_USER_DATA")
}

record(ao,"$(P)$(M)_USERDATADEADB_SP")
{
	field(DESC, "User data deadb")
	field(DTYP, "asynFloat64")
	field(VAL,  "1")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_USER_DATA_DEADB")
}

record(bi,"$(P)$(M)_JAH_STATUS")
{
	field(DESC, "Jog after home")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "No")
	field(ZSV,  "NO_ALARM")
	field(ONAM, "Yes")
	field(OSV,  "NO_ALARM")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME")
}

record(bo,"$(P)$(M)_JAH_CMD")
{
	field(DESC,"Jog after home")
	field(DTYP,"asynInt32")
	field(VAL, "1")
	field(PINI,"YES")
	field(ZNAM,"No")
	field(ZSV, "NO_ALARM")
	field(ONAM,"Yes")
	field(OSV, "NO_ALARM")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME")
	field(FLNK,"$(P)$(M)_JAH_STATUS")
}

record(ai,"$(P)$(M)_JAHV_MON")
{
	field(DESC,"Jog after home val")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME_VALUE")
}

record(ao,"$(P)$(M)_JAHV_SP")
{
	field(DESC,"Jog after home val")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, "1")
	field(PINI,"YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_JOG_AHOME_VALUE")
	field(FLNK,"$(P)$(M)_JAHV_MON")
}

record(ai,"$(P)$(M)_EGUAFTLIMIT_MON")
{
	field(DESC,"Egu after limit")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTER_LIMIT")
}

record(ao,"$(P)$(M)_EGUAFTLIMIT_SP")
{
	field(DESC,"EGU after limit")
	field(DTYP,"asynFloat64")
	field(EGU, "$(EGU)")
	field(PREC,"$(PREC)")
	field(VAL, "0.001")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_EGUAFTER_LIMIT")
	field(FLNK,"$(P)$(M)_EGUAFTLIMIT_MON")
}

record(ai,"$(P)$(M)_HOMEVAL_MON")
{
	field(DESC,"Home value")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
}

record(ao,"$(P)$(M)_HOMEVAL_SP")
{
	field(DESC,"Home value")
	field(VAL, "0")
	field(PINI,"YES")
	field(EGU, "$(EGU)")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_HOMEVAL")
	field(FLNK,"$(P)$(M)_HOMEVAL_MON")
}

record(mbbi,"$(P)$(M)_SSIINPUT_STATUS")
{
	field(DESC, "ssi input")
	field(SCAN,"$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
}

record(ai,"$(P)$(M)_SSITOTBITS_MON")
{
	field(DESC,"SSI totalbits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
}

record(ai,"$(P)$(M)_SSISINGLETBITS_MON")
{
	field(DESC,"SSI singleturn bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
}

record(ai,"$(P)$(M)_SSIERRBITS_MON")
{
	field(DESC,"SSI err bits")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
}

record(ai,"$(P)$(M)_SSITIME_MON")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
}

record(bi,"$(P)$(M)_SSIDATA_STATUS")
{
	field(DESC,"SSI timecode")
	field(PINI,"YES")
	field(DTYP,"asynInt32")
	field(ONAM,"Gray")
	field(ZNAM,"Binary")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
}

record(mbbo,"$(P)$(M)_SSIINPUT_CMD")
{
	field(DESC, "ssi input")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Replace main")
	field(TWST, "Replace aux")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSIINPUT")
	field(FLNK, "$(P)$(M)_SSIINPUT_STATUS")
}

record(ao,"$(P)$(M)_SSITOTBITS_SP")
{
	field(DESC, "ssi total bits")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(VAL,  "25")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSITOTBITS")
	field(FLNK, "$(P)$(M)_SSITOTBITS_MON")
}

record(ao,"$(P)$(M)_SSISINGLETBITS_SP")
{
	field(DESC, "ssi single turn bits")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(VAL,  "13")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSISINGLETBITS")
	field(FLNK, "$(P)$(M)_SSISINGLETBITS_MON")
}

record(ao,"$(P)$(M)_SSIERRBITS_SP")
{
	field(DESC, "ssi err bits")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSIERRBITS")
	field(FLNK, "$(P)$(M)_SSIERRBITS_MON")
}

record(ao,"$(P)$(M)_SSITIME_SP")
{
	field(DESC, "ssi timecode")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(VAL,  "13")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSITIME")
	field(FLNK, "$(P)$(M)_SSITIME_MON")
}

record(bo,"$(P)$(M)_SSIDATA_CMD")
{
	field(DESC, "ssi dataform")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ONAM, "Gray")
	field(ZNAM, "Binary")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_SSIDATA")
	field(FLNK, "$(P)$(M)_SSIDATA_STATUS")
}

record(mbbo,"$(P)$(M)_HOMEALLOWED_CMD")
{
	field(DESC, "Home allowed")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "None")
	field(ONST, "Reverse")
	field(TWST, "Forward")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_HOME_ALLOWED")
	field(FLNK, "$(P)$(M)_HOMEALLOWED_STATUS")
}

record(mbbi,"$(P)$(M)_HOMEALLOWED_STATUS")
{
	field(DESC, "Home allowed")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "None")
	field(ONST, "Reverse")
	field(TWST, "Forward")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_HOME_ALLOWED")
}

#Motor stop delay
record(ai,"$(P)$(M)_STOPDELAY_MON")
{
	field(DESC,"stop delay")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_STOP_DELAY")
}

record(ao,"$(P)$(M)_STOPDELAY_SP")
{
	field(DESC,"stop delay")
	field(DTYP,"asynFloat64")
	field(PREC,"$(PREC)")
	field(EGU, "Secs")
	field(VAL, "0.00")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_STOP_DELAY")
	field(FLNK,"$(P)$(M)_STOPDELAY_MON")
}

record(mbbo,"$(P)$(M)_AMPGAIN_CMD")
{
	field(DESC, "Amp gain")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Zero")
	field(ONST, "One")
	field(TWST, "Two")
	field(THST, "Three")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_GAIN")
	field(FLNK, "$(P)$(M)_AMPGAIN_STATUS")
}

record(mbbi,"$(P)$(M)_AMPGAIN_STATUS")
{
	field(DESC, "Amp gain")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Zero")
	field(ONST, "One")
	field(TWST, "Two")
	field(THST, "Three")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_GAIN")
}

record(mbbo,"$(P)$(M)_AMPCLGAIN_CMD")
{
	field(DESC, "Amp CL gain")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Zero")
	field(ONST, "Point five")
	field(TWST, "One")
	field(THST, "One point five")
	field(FRST, "Two")
	field(FVST, "Three")
	field(SXST, "Four")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_CURRENTLOOP_GAIN")
	field(FLNK, "$(P)$(M)_AMPCLGAIN_STATUS")
}

record(mbbi,"$(P)$(M)_AMPCLGAIN_STATUS")
{
	field(DESC, "Amp CL gain")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Zero")
	field(ONST, "Point five")
	field(TWST, "One")
	field(THST, "One point five")
	field(FRST, "Two")
	field(FVST, "Three")
	field(SXST, "Four")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(VAL,  "0")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_CURRENTLOOP_GAIN")
}

record(ao,"$(P)$(M)_AMPLC_SP")
{
	field(DESC, "Amp low current")
	field(DTYP, "asynInt32")
	field(DRVL, "0")
	field(DRVH, "4")
	field(PREC, "$(PREC)")
	field(PINI, "YES")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_LOWCURRENT")
	field(FLNK, "$(P)$(M)_AMPLC_MON")
}

record(ai,"$(P)$(M)_AMPLC_MON")
{
	field(DESC, "Amp low current")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(PREC, "$(PREC)")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AMP_LOWCURRENT")
}

record(ao,"$(P)$(M)_ERRLIMIT_SP")
{
	field(DESC,"error limit")
	field(PINI,"YES")
	field(VAL, "16384")
	field(EGU, "cts")
	field(DTYP,"asynFloat64")
	field(OUT, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
	field(FLNK,"$(P)$(M)_ERRLIMIT_MON")
}

record(ai,"$(P)$(M)_ERRLIMIT_MON")
{
	field(DESC,"error limit")
	field(PINI,"YES")
	field(EGU, "cts")
	field(DTYP,"asynFloat64")
	field(SCAN,"$(SCAN)")
	field(INP, "@asyn($(PORT),$(ADDR))MOTOR_ERRLIM")
}

record(ai,"$(P)$(M)_ERR_MON")
{
	field(DESC, "error limit")
	field(EGU,  "cts")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_ERR")
}

record(ai,"$(P)$(M)_VELOCITYRAW_MON")
{
	field(DESC, "servo velocity raw")
	field(EGU,  "cts/s")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_VELOCITY_RAW")
}

record(ai,"$(P)$(M)_VELOCITYEGU_MON")
{
	field(DESC, "servo velocity egu")
	field(EGU,  "$(EGU)/s")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_VELOCITY_EGU")
}

record(mbbo,"$(P)$(M)_OFFONERR_CMD")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
	field(FLNK, "$(P)$(M)_OFFONERR_STATUS")
}

record(mbbi,"$(P)$(M)_OFFONERR_STATUS")
{
	field(DESC, "error limit")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "Position error")
	field(TWST, "Limits")
	field(THST, "Both")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_OOE")
}

record(mbbi,"$(P)$(M)_AXIS_STATUS")
{
	field(DESC, "Axis chan")
	field(PINI, "YES")
	field(SCAN, "I/O Intr")
	field(DTYP, "asynInt32")
	field(ZRST, "A")
	field(ONST, "B")
	field(TWST, "C")
	field(THST, "D")
	field(FRST, "E")
	field(FVST, "F")
	field(SXST, "G")
	field(SVST, "H")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AXIS")
}

record(mbbo,"$(P)$(M)_MTRTYPE_CMD")
{
	field(DESC, "mtr type")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
	field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(SXST, "PWM servo")
	field(SVST, "PWM rev servo")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(VAL,  "$(MTRTYPE)")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
	field(FLNK, "$(P)$(M)_MTRTYPE_CMD_FAN")
}

record(fanout, "$(P)$(M)_MTRTYPE_CMD_FAN")
{
	field(SELM, "All")
	#Changing motor type can change aux encoder also
	field(LNK1, "$(P)$(M)_MTRTYPE_STATUS")
	field(LNK2, "$(P)$(M)_AENCTYPE_STATUS")
}

record(mbbi,"$(P)$(M)_MTRTYPE_STATUS")
{
	field(DESC, "mtr type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Servo")
	field(ONST, "Rev Servo")
	field(TWST, "HA Stepper")
	field(THST, "LA Stepper")
	field(FRST, "Rev HA Stepper")
	field(FVST, "Rev LA Stepper")
	field(SXST, "PWM servo")
	field(SVST, "PWM rev servo")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_TYPE")
}

record(mbbo,"$(P)$(M)_MENCTYPE_CMD")
{
	field(DESC, "main enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
	field(FLNK, "$(P)$(M)_MENCTYPE_STATUS")
}

record(mbbi,"$(P)$(M)_MENCTYPE_STATUS")
{
	field(DESC, "main enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_MAIN_ENCODER")
}

record(mbbo,"$(P)$(M)_AENCTYPE_CMD")
{
	field(DESC, "Aux enc type")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
	field(THVL, "12")
	field(VAL,  "0")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
	field(FLNK, "$(P)$(M)_AENCTYPE_STATUS")
}

record(mbbi,"$(P)$(M)_AENCTYPE_STATUS")
{
	field(DESC, "Aux enc type")
	field(PINI, "YES")
	field(SCAN, "$(SCAN)")
	field(DTYP, "asynInt32")
	field(ZRST, "Normal Quadrature")
	field(ONST, "Pulse and Dir")
	field(TWST, "Reverse Quadrature")
	field(THST, "Rev Pulse and Dir")
	field(ZRVL, "0")
	field(ONVL, "4")
	field(TWVL, "8")
	field(THVL, "12")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUX_ENCODER")
}

#Wrong limit protection
record(bo,"$(P)$(M)_WLP_CMD")
{
	field(DESC, "wrong limit protect")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "1")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")	
	field(FLNK, "$(P)$(M)_WLP_STATUS")
}

record(bi,"$(P)$(M)_WLP_STATUS")
{
	field(DESC, "wrong limit protect")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP")
}

record(bi,"$(P)$(M)_WLPACTIVE_STATUS")
{
	field(DESC, "wlp activated")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "OK")
	field(ZSV,  "NO_ALARM")
  	field(ONAM, "Stopped!")
	field(OSV,  "MAJOR")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_WLP_ACTIVE")
}

#Motor power auto on/off between moves
record(bo,"$(P)$(M)_AUTOONOFF_CMD")
{
	field(DESC, "mtr auto on/off")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONOFF")
	field(FLNK, "$(P)$(M)_AUTOONOFF_STATUS")
}

record(bi,"$(P)$(M)_AUTOONOFF_STATUS")
{
	field(DESC, "mtr auto on/off")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONOFF")
}

#Motor auto power on delay
record(ai,"$(P)$(M)_ONDELAY_MON")
{
	field(DESC, "mtr pwr on dly")
	field(DTYP, "asynFloat64")
	field(SCAN, "$(SCAN)")
	field(PREC, "$(PREC)")
	field(EGU,  "Secs")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONDELAY")
}

record(ao,"$(P)$(M)_ONDELAY_SP")
{
	field(DESC, "mtr pwr on dly")
	field(DTYP, "asynFloat64")
	field(PREC, "$(PREC)")
	field(EGU,  "Secs")
	field(VAL,  ".2")
	field(DRVH, "3")
	field(DRVL, ".001")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_ONDELAY")
	field(FLNK, "$(P)$(M)_ONDELAY_MON")
}

#Motor auto power off delay
record(ai,"$(P)$(M)_OFFDELAY_MON")
{
	field(DESC, "mtr pwr off dly")
	field(DTYP, "asynFloat64")
	field(SCAN, "$(SCAN)")
	field(PREC, "$(PREC)")
	field(EGU,  "Secs")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_OFFDELAY")
}

record(ao,"$(P)$(M)_OFFDELAY_SP")
{
	field(DESC, "mtr pwr off dly")
	field(DTYP, "asynFloat64")
	field(PREC, "$(PREC)")
	field(EGU,  "Secs")
	field(VAL,  ".2")
	field(DRVH, "3")
	field(DRVL, ".001")
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_OFFDELAY")
	field(FLNK, "$(P)$(M)_OFFDELAY_MON")
}

#Motor brake manual control
record(bo,"$(P)$(M)_BRAKE_CMD")
{
	field(DESC, "mtr brake")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_BRAKE")
}

record(bi,"$(P)$(M)_BRAKE_STATUS")
{
	field(DESC, "mtr brake")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_BRAKE")
}

#Motor auto brake between moves
record(bo,"$(P)$(M)_AUTOBRAKE_CMD")
{
	field(DESC, "mtr auto brake")
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(ZNAM, "Off")
	field(ONAM, "On")
	field(VAL,  "0")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_BRAKE")
	field(FLNK, "$(P)$(M)_AUTOBRAKE_STATUS")
}

record(bi,"$(P)$(M)_AUTOBRAKE_STATUS")
{
	field(DESC, "mtr auto brake")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(ZNAM, "Off")
  	field(ONAM, "On")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_BRAKE")
}

#Motor auto brake port
record(ai,"$(P)$(M)_BRAKEPORT_MON")
{
	field(DESC, "mtr brake digport")
	field(DTYP, "asynInt32")
	field(SCAN, "$(SCAN)")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_BRAKEPORT")
}

record(ao,"$(P)$(M)_BRAKEPORT_SP")
{
	field(DESC, "mtr brake digport")
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(DRVH, "16")
	field(DRVL, "-1")
	field(VAL,  "-1")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_BRAKEPORT")
	field(FLNK, "$(P)$(M)_BRAKEPORT_MON")
}

#Motor auto brake on delay
record(ai,"$(P)$(M)_BRAKEONDELAY_MON")
{
	field(DESC, "mtr brake on delay")
	field(DTYP, "asynFloat64")
	field(SCAN, "$(SCAN)")
	field(EGU,  "Secs")
	field(PREC, "$(PREC)")
	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_BRAKEONDELAY")
}

record(ao,"$(P)$(M)_BRAKEONDELAY_SP")
{
	field(DESC, "mtr brake on delay")
	field(DTYP, "asynFloat64")
	field(PINI, "YES")
	field(EGU,  "Secs")
	field(PREC, "$(PREC)")
	field(VAL,  ".2")
	field(DRVH, "3")
	field(DRVL, ".001")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_AUTO_BRAKEONDELAY")
	field(FLNK, "$(P)$(M)_BRAKEONDELAY_MON")
}

record(bi,"$(P)$(M)_ON_STATUS")
{
	field(DESC, "Mtr on status")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(ZNAM, "Off")
   	field(ZSV,  "MINOR")
  	field(ONAM, "On")
  	field(OSV,  "NO_ALARM")
   	field(INP,  "@asyn($(PORT),$(ADDR))MOTOR_STATUS_POWERED")
}

#This mbbi/mbbo is deliberately last, so motor on/off function is 
#always after other defaults have been set (eg. Limits, and encoder)
record(mbbo,"$(P)$(M)_ON_CMD")
{
	field(DESC, "Motor on cmd")
	field(DTYP, "asynInt32")
	field(ZRST, "Off")
	field(ONST, "On")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(PINI, "YES")
	field(VAL,  "$(MTRON)")
	field(OUT,  "@asyn($(PORT),$(ADDR))MOTOR_CLOSED_LOOP")
	field(FLNK, "$(P)$(M)_ON_STATUS")
}

#end
